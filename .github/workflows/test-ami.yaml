run-name: Wazuh AMI Test - Branch ${{ github.ref_name }} - Launched by @${{ github.actor }}
name: Wazuh AMI Test

on:
  workflow_dispatch:
    inputs:
      WAZUH_VIRTUAL_MACHINES_REFERENCE:
        description: 'Branch or tag of the wazuh-virtual-machines repository'
        required: true
        default: 'master'
      test_type:
        description: 'Test type (ami or ssh)'
        required: true
        default: 'ami'
        type: choice
        options:
          - ami
          - ssh
      host:
        description: 'AMI ID to create ami or host for direct ssh connection'
        required: false
        type: string
      key_name:
        description: 'Key name to use for SSH connection'
        required: false
        type: string
      WAZUH_SERVER_VERSION_REVISION:
        description: 'Expected Wazuh server version-revision'
        required: false
        type: string
      WAZUH_INDEXER_VERSION_REVISION:
        description: 'Expected Wazuh indexer version-revision'
        required: false
        type: string
      WAZUH_DASHBOARD_VERSION_REVISION:
        description: 'Expected Wazuh dashboard version-revision'
        required: false
        type: string
      TESTS:
        description: 'Test to run'
        required: false
        default: 'ALL'
        type: choice
        options:
          - ALL
          - CERTIFICATES
          - CONNECTIVITY
          - LOGS
          - SERVICE
          - VERSION
      log_level:
        description: 'Log level'
        required: false
        default: 'INFO'
        type: choice
        options:
          - INFO
          - DEBUG
          - TRACE

env:
  AWS_DEV_AUTOMATION_ROLE: ${{ secrets.AWS_DEV_AUTOMATION_ROLE }}
  AWS_QA_AUTOMATION_ROLE: ${{ secrets.AWS_QA_AUTOMATION_ROLE }}
  WAZUH_SERVER_EXPECTED_VERSION: ${{ github.event.inputs.WAZUH_SERVER_VERSION_REVISION }}
  WAZUH_INDEXER_EXPECTED_VERSION: ${{ github.event.inputs.WAZUH_INDEXER_VERSION_REVISION }}
  WAZUH_DASHBOARD_EXPECTED_VERSION: ${{ github.event.inputs.WAZUH_DASHBOARD_VERSION_REVISION }}

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: View parameters
        run: echo "${{ toJson(inputs) }}"
      - name: Checkout wazuh/wazuh-virtual-machines repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.WAZUH_VIRTUAL_MACHINES_REFERENCE }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r wazuh_vm_tester/requirements.txt
          pip install -e wazuh_vm_tester/

      - name: Setup AWS role environment variables
        run: |
          echo "AWS_QA_AUTOMATION_ROLE=${{ secrets.AWS_QA_AUTOMATION_ROLE }}" >> $GITHUB_ENV
          echo "AWS_DEV_AUTOMATION_ROLE=${{ secrets.AWS_DEV_AUTOMATION_ROLE }}" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV

      - name: Run tests with AMI mode
        if: ${{ github.event.inputs.test_type == 'ami' }}
        run: |
          # Find the executable dynamically and store its path in a variable
          WAZUH_VM_TEST_PATH=$(find /opt/hostedtoolcache/Python -name "wazuh-vm-test" | head -n 1)

          # Exit if executable not found
          if [ -z "$WAZUH_VM_TEST_PATH" ]; then
            echo "Error: wazuh-vm-test executable not found"
            exit 1
          fi

          echo "Found executable at: $WAZUH_VM_TEST_PATH"

          # Run the tests using the dynamically found path
          $WAZUH_VM_TEST_PATH \
            --ami-id ${{ github.event.inputs.host }} \
            --aws-region ${{ github.event.inputs.aws_region || 'us-east-1' }} \
            --test-pattern "${{ github.event.inputs.TESTS }}" \
            --log-level ${{ github.event.inputs.log_level || 'INFO' }} \
            --output github \
            --output-file test-results.github

      - name: Run tests with SSH mode
        if: ${{ github.event.inputs.test_type == 'ssh' }}
        run: |
          # Find the executable dynamically and store its path in a variable
          WAZUH_VM_TEST_PATH=$(find /opt/hostedtoolcache/Python -name "wazuh-vm-test" | head -n 1)

          # Exit if executable not found
          if [ -z "$WAZUH_VM_TEST_PATH" ]; then
            echo "Error: wazuh-vm-test executable not found"
            exit 1
          fi

          echo "Found executable at: $WAZUH_VM_TEST_PATH"

          # Run the tests using the dynamically found path
          $WAZUH_VM_TEST_PATH \
            --ssh-host ${{ github.event.inputs.host }} \
            --ssh-key-path ${{ github.event.inputs.key_name }} \
            --test-pattern "${{ github.event.inputs.TESTS }}" \
            --log-level ${{ github.event.inputs.log_level || 'INFO' }} \
            --output github \
            --output-file test-results.github

      - name: Parse test results
        if: always()
        id: parse-results
        run: |
          if [ -f test-results.github ]; then
            # Set environment variables from test results file
            while IFS= read -r line; do
              if [[ $line == *=* ]]; then
                echo $line >> $GITHUB_ENV
              fi
            done < test-results.github
          else
            echo "No test results file found!"
            echo "test_status=ERROR" >> $GITHUB_ENV
            echo "total_tests=0" >> $GITHUB_ENV
            echo "passed_tests=0" >> $GITHUB_ENV
            echo "failed_tests=0" >> $GITHUB_ENV
            echo "warning_tests=0" >> $GITHUB_ENV
            echo "skipped_tests=0" >> $GITHUB_ENV
            echo "short_summary=Failed to generate test results" >> $GITHUB_ENV
          fi

      - name: Create GitHub Summary
        if: always()
        run: |
          if [ -f test-results.github ]; then
            # Extract multiline summary from the test results
            awk '/summary<<EOF/{flag=1;next}/EOF/{flag=0}flag' test-results.github > summary.md
            cat summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "## Test Execution Failed" >> $GITHUB_STEP_SUMMARY
            echo "No test results were generated. Please check the workflow logs." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set job status
        if: always()
        run: |
          if [[ "${{ env.test_status }}" == "PASS" ]]; then
            echo "Tests passed successfully!"
            exit 0
          elif [[ "${{ env.test_status }}" == "WARNING" ]]; then
            echo "Tests passed with warnings!"
            exit 0
          else
            echo "Tests failed with status: ${{ env.test_status }}"
            exit 1
          fi
